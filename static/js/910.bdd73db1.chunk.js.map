{"version":3,"file":"static/js/910.bdd73db1.chunk.js","mappings":"mTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAY,mCAELC,EAAW,mCAAG,WAAOC,EAAOC,GAAd,uFACFJ,EAAAA,EAAAA,IAAU,gBAAiB,CAChDK,OAAQ,CACNF,MAAOA,EACPG,QAASL,EACTG,KAAMA,KALe,cACnBG,EADmB,yBASlBA,EAASC,KAAKC,SATI,2CAAH,wDAYXC,EAAa,mCAAG,oGACJV,EAAAA,EAAAA,IAAU,sBAAuB,CACtDK,OAAQ,CACNC,QAASL,KAHc,cACrBM,EADqB,yBAOpBA,EAASC,KAAKC,SAPM,2CAAH,qDAUbE,EAAU,mCAAG,WAAMC,GAAN,uFACDZ,EAAAA,EAAAA,IAAA,iBAAoBY,GAAW,CACpDP,OAAQ,CACNC,QAASL,KAHW,cAClBM,EADkB,yBAOjBA,EAASC,MAPQ,2CAAH,sDAUVK,EAAiB,mCAAG,WAAMD,GAAN,uFACRZ,EAAAA,EAAAA,IAAA,iBAAoBY,EAApB,YAAuC,CAC5DP,OAAQ,CACNC,QAASL,KAHkB,cACzBM,EADyB,yBAOxBA,EAASC,KAAKM,MAPU,2CAAH,sDAUjBC,EAAiB,mCAAG,WAAMH,GAAN,uFACRZ,EAAAA,EAAAA,IAAA,iBAAoBY,EAApB,YAAuC,CAC5DP,OAAQ,CACNC,QAASL,KAHkB,cACzBM,EADyB,yBAOxBA,EAASC,KAAKC,SAPU,2CAAH,qD,gHCN9B,UApCa,WACX,IAAQO,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAAoCE,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OAbAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE6BR,EAAAA,EAAAA,IAAkBG,GAF/C,OAEUG,EAFV,OAGIC,EAAcD,EAAWG,MAAM,EANhB,IAGnB,iJADc,uBAAC,WAAD,wBAUdC,EACD,GAAE,CAACP,KAGF,wBACGG,EAAWK,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,UAAWC,EAAS,EAATA,GAC1CC,EACJ,gDAAkDJ,EACpD,OACE,2BACE,gBAAKK,IAAKD,EAAYE,IAAI,MAC1B,uBAAIL,KACJ,uBAAIC,MAHGC,EAMZ,KAGN,C","sources":["components/API.js","components/Cast.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst commonKey = 'f42f2f62d598d39d316744d8859de3e9';\n\nexport const fetchSearch = async (query, page) => {\n  const response = await axios.get('/search/movie', {\n    params: {\n      query: query,\n      api_key: commonKey,\n      page: page,\n    },\n  });\n\n  return response.data.results;\n};\n\nexport const fetchTrending = async () => {\n  const response = await axios.get('/trending/movie/day', {\n    params: {\n      api_key: commonKey,\n    },\n  });\n\n  return response.data.results;\n};\n\nexport const fetchMovie = async movieId => {\n  const response = await axios.get(`/movie/${movieId}`, {\n    params: {\n      api_key: commonKey,\n    },\n  });\n\n  return response.data;\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/credits`, {\n    params: {\n      api_key: commonKey,\n    },\n  });\n\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/reviews`, {\n    params: {\n      api_key: commonKey,\n    },\n  });\n\n  return response.data.results;\n};\n","import { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCredits } from './API';\n\nconst Cast = () => {\n  const { moviesId } = useParams();\n  const [moviesCast, setMoviesCast] = useState([]);\n\n  const maxCastCount = 5;\n\n  useEffect(() => {\n    async function fetchCast() {\n      try {\n        const moviesCast = await fetchMovieCredits(moviesId);\n        setMoviesCast(moviesCast.slice(0, maxCastCount));\n      } catch (error) {\n      } finally {\n      }\n    }\n\n    fetchCast();\n  }, [moviesId]);\n\n  return (\n    <ul>\n      {moviesCast.map(({ profile_path, name, character, id }) => {\n        const profileUrl =\n          'https://image.tmdb.org/t/p/w138_and_h175_face' + profile_path;\n        return (\n          <li key={id}>\n            <img src={profileUrl} alt=\"\"></img>\n            <p>{name}</p>\n            <p>{character}</p>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default Cast;\n"],"names":["axios","commonKey","fetchSearch","query","page","params","api_key","response","data","results","fetchTrending","fetchMovie","movieId","fetchMovieCredits","cast","fetchMovieReviews","moviesId","useParams","useState","moviesCast","setMoviesCast","useEffect","slice","fetchCast","map","profile_path","name","character","id","profileUrl","src","alt"],"sourceRoot":""}