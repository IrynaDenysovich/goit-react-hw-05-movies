{"version":3,"file":"static/js/357.ccaf2adf.chunk.js","mappings":"mTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAY,mCAELC,EAAW,mCAAG,WAAOC,EAAOC,GAAd,uFACFJ,EAAAA,EAAAA,IAAU,gBAAiB,CAChDK,OAAQ,CACNF,MAAOA,EACPG,QAASL,EACTG,KAAMA,KALe,cACnBG,EADmB,yBASlBA,EAASC,KAAKC,SATI,2CAAH,wDAYXC,EAAa,mCAAG,oGACJV,EAAAA,EAAAA,IAAU,sBAAuB,CACtDK,OAAQ,CACNC,QAASL,KAHc,cACrBM,EADqB,yBAOpBA,EAASC,KAAKC,SAPM,2CAAH,qDAUbE,EAAU,mCAAG,WAAMC,GAAN,uFACDZ,EAAAA,EAAAA,IAAA,iBAAoBY,GAAW,CACpDP,OAAQ,CACNC,QAASL,KAHW,cAClBM,EADkB,yBAOjBA,EAASC,MAPQ,2CAAH,sDAUVK,EAAiB,mCAAG,WAAMD,GAAN,uFACRZ,EAAAA,EAAAA,IAAA,iBAAoBY,EAApB,YAAuC,CAC5DP,OAAQ,CACNC,QAASL,KAHkB,cACzBM,EADyB,yBAOxBA,EAASC,KAAKM,MAPU,2CAAH,sDAUjBC,EAAiB,mCAAG,WAAMH,GAAN,uFACRZ,EAAAA,EAAAA,IAAA,iBAAoBY,EAApB,YAAuC,CAC5DP,OAAQ,CACNC,QAASL,KAHkB,cACzBM,EADyB,yBAOxBA,EAASC,KAAKC,SAPU,2CAAH,qD,gHCC9B,UA3CgB,WACd,IAAQO,GAAaC,EAAAA,EAAAA,MAAbD,SACR,GAA0CE,EAAAA,EAAAA,UAAS,IAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAA0CF,EAAAA,EAAAA,UAAS,IAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KAuBA,OAnBAC,EAAAA,EAAAA,YAAU,WAAM,wCAEd,8GAE6BR,EAAAA,EAAAA,IAAkBC,GAF/C,OAEUQ,EAFV,OAGIJ,EAAiBI,EAAWC,MAAM,EAPnB,IAQfH,EACwB,IAAtBE,EAAWE,OACP,4CACA,IAPV,gDAUIC,QAAQC,IAAR,MAVJ,0DAFc,sBACdN,EAAiB,cADH,mCAgBdO,EACD,GAAE,CAACb,KAGF,2BACGK,EAAcK,OAAS,IAAK,yBAAML,KACnC,wBACGF,EAAcW,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,GACrC,OACE,2BACE,wBAAKF,KACL,uBAAIC,MAFGC,EAKZ,QAIR,C","sources":["components/API.js","components/Reviews.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst commonKey = 'f42f2f62d598d39d316744d8859de3e9';\n\nexport const fetchSearch = async (query, page) => {\n  const response = await axios.get('/search/movie', {\n    params: {\n      query: query,\n      api_key: commonKey,\n      page: page,\n    },\n  });\n\n  return response.data.results;\n};\n\nexport const fetchTrending = async () => {\n  const response = await axios.get('/trending/movie/day', {\n    params: {\n      api_key: commonKey,\n    },\n  });\n\n  return response.data.results;\n};\n\nexport const fetchMovie = async movieId => {\n  const response = await axios.get(`/movie/${movieId}`, {\n    params: {\n      api_key: commonKey,\n    },\n  });\n\n  return response.data;\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/credits`, {\n    params: {\n      api_key: commonKey,\n    },\n  });\n\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/reviews`, {\n    params: {\n      api_key: commonKey,\n    },\n  });\n\n  return response.data.results;\n};\n","import { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from './API';\n\nconst Reviews = () => {\n  const { moviesId } = useParams();\n  const [moviesReviews, setMoviesReviews] = useState([]);\n  const [statusMessage, setStatusMessage] = useState('');\n\n  const maxCastCount = 5;\n\n  useEffect(() => {\n    setStatusMessage('Loading...');\n    async function fetchReviews() {\n      try {\n        const moviesCast = await fetchMovieReviews(moviesId);\n        setMoviesReviews(moviesCast.slice(0, maxCastCount));\n        setStatusMessage(\n          moviesCast.length === 0\n            ? \"We don't have any reviews for this movie.\"\n            : ''\n        );\n      } catch (error) {\n        console.log(error);\n      } \n    }\n\n    fetchReviews();\n  }, [moviesId]);\n\n  return (\n    <div>\n      {statusMessage.length > 0 && <div>{statusMessage}</div>}\n      <ul>\n        {moviesReviews.map(({ author, content, id }) => {\n          return (\n            <li key={id}>\n              <h3>{author}</h3>\n              <p>{content}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n"],"names":["axios","commonKey","fetchSearch","query","page","params","api_key","response","data","results","fetchTrending","fetchMovie","movieId","fetchMovieCredits","cast","fetchMovieReviews","moviesId","useParams","useState","moviesReviews","setMoviesReviews","statusMessage","setStatusMessage","useEffect","moviesCast","slice","length","console","log","fetchReviews","map","author","content","id"],"sourceRoot":""}