{"version":3,"file":"static/js/338.c5267c52.chunk.js","mappings":"mTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAY,mCAELC,EAAW,mCAAG,WAAOC,EAAOC,GAAd,uFACFJ,EAAAA,EAAAA,IAAU,gBAAiB,CAChDK,OAAQ,CACNF,MAAOA,EACPG,QAASL,EACTG,KAAMA,KALe,cACnBG,EADmB,yBASlBA,EAASC,KAAKC,SATI,2CAAH,wDAYXC,EAAa,mCAAG,oGACJV,EAAAA,EAAAA,IAAU,sBAAuB,CACtDK,OAAQ,CACNC,QAASL,KAHc,cACrBM,EADqB,yBAOpBA,EAASC,KAAKC,SAPM,2CAAH,qDAUbE,EAAU,mCAAG,WAAMC,GAAN,uFACDZ,EAAAA,EAAAA,IAAA,iBAAoBY,GAAW,CACpDP,OAAQ,CACNC,QAASL,KAHW,cAClBM,EADkB,yBAOjBA,EAASC,MAPQ,2CAAH,sDAUVK,EAAiB,mCAAG,WAAMD,GAAN,uFACRZ,EAAAA,EAAAA,IAAA,iBAAoBY,EAApB,YAAuC,CAC5DP,OAAQ,CACNC,QAASL,KAHkB,cACzBM,EADyB,yBAOxBA,EAASC,KAAKM,MAPU,2CAAH,sDAUjBC,EAAiB,mCAAG,WAAMH,GAAN,uFACRZ,EAAAA,EAAAA,IAAA,iBAAoBY,EAApB,YAAuC,CAC5DP,OAAQ,CACNC,QAASL,KAHkB,cACzBM,EADyB,yBAOxBA,EAASC,KAAKC,SAPU,2CAAH,qD,+GC3CxBO,GAAaC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAClBC,GAAYD,EAAAA,EAAAA,OAAK,kBAAM,qDAAN,IAuCvB,UArCe,WACb,OAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAuBC,EAAAA,EAAAA,MAAhBC,GAAP,eAFmB,wCAanB,WAA0BpB,GAA1B,mGAEyBD,EAAAA,EAAAA,IAAYC,EAXxB,GASb,OAEUiB,EAFV,OAGUI,EAAYJ,EAAOK,KAAI,kBAAoB,CAC/CC,GAD2B,EAAGA,GAE9BC,MAF2B,EAAOA,MAAP,IAI7BN,EAAUG,GAPd,gDASII,QAAQC,IAAR,MATJ,sGAbmB,sBA2BnB,OArBAC,EAAAA,EAAAA,YAAU,WACR,IAAM3B,EAAQoB,EAAaQ,IAAI,SAC3B5B,GARa,oCASf6B,CAAW7B,EAEd,GAAE,CAACoB,KAiBF,0BACE,UAAC,EAAAU,SAAD,CAAUC,UAAU,wCAApB,WACE,SAAChB,EAAD,KACA,SAACF,EAAD,CAAYI,OAAQA,QAI3B,C","sources":["components/API.js","components/Pages/Movies.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst commonKey = 'f42f2f62d598d39d316744d8859de3e9';\n\nexport const fetchSearch = async (query, page) => {\n  const response = await axios.get('/search/movie', {\n    params: {\n      query: query,\n      api_key: commonKey,\n      page: page,\n    },\n  });\n\n  return response.data.results;\n};\n\nexport const fetchTrending = async () => {\n  const response = await axios.get('/trending/movie/day', {\n    params: {\n      api_key: commonKey,\n    },\n  });\n\n  return response.data.results;\n};\n\nexport const fetchMovie = async movieId => {\n  const response = await axios.get(`/movie/${movieId}`, {\n    params: {\n      api_key: commonKey,\n    },\n  });\n\n  return response.data;\n};\n\nexport const fetchMovieCredits = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/credits`, {\n    params: {\n      api_key: commonKey,\n    },\n  });\n\n  return response.data.cast;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const response = await axios.get(`/movie/${movieId}/reviews`, {\n    params: {\n      api_key: commonKey,\n    },\n  });\n\n  return response.data.results;\n};\n","import { lazy, Suspense, useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { fetchSearch } from 'components/API';\n\nconst MoviesList = lazy(() => import('../MoviesList'));\nconst SearchBox = lazy(() => import('../SearchBox/SearchBox'));\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams] = useSearchParams();\n\n  const page = 1;\n\n  useEffect(() => {\n    const query = searchParams.get('query');\n    if (query) {\n      fetchQuery(query);\n    }\n  }, [searchParams]);\n\n  async function fetchQuery(query) {\n    try {\n      const movies = await fetchSearch(query, page);\n      const newMovies = movies.map(({ id, title }) => ({\n        id,\n        title,\n      }));\n      setMovies(newMovies);\n    } catch (error) {\n      console.log(error);\n    } finally {\n    }\n  }\n\n  return (\n    <div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <SearchBox></SearchBox>\n        <MoviesList movies={movies}></MoviesList>\n      </Suspense>\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["axios","commonKey","fetchSearch","query","page","params","api_key","response","data","results","fetchTrending","fetchMovie","movieId","fetchMovieCredits","cast","fetchMovieReviews","MoviesList","lazy","SearchBox","useState","movies","setMovies","useSearchParams","searchParams","newMovies","map","id","title","console","log","useEffect","get","fetchQuery","Suspense","fallback"],"sourceRoot":""}